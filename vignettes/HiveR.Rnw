%\VignetteIndexEntry{HiveR: 2D and 3D Hive Plots for R}
%\VignetteDepends{RColorBrewer, grid, rgl, RFOC, bipartite, sna, xtable, mvbutils, FuncMap, lattice}
%\VignettePackage{HiveR}

\documentclass[10pt]{article}

\SweaveOpts{echo = T, pdf = T, eps = F, eval = T, keep.source = T, prefix.string = graphics/vig}
\usepackage{Sweave}
\setkeys{Gin}{width = 0.6\textwidth} % part of Sweave I believe; 0.8 is the default

\graphicspath{{./graphics/}}

\usepackage{mathpazo}
\usepackage{color}
\usepackage{hyperref, url}
\usepackage{graphicx}
\usepackage[margin = 2.0cm]{geometry}
\geometry{letterpaper}
\usepackage[parfill]{parskip}    % Activate to begin paragraphs with an empty line rather than an indent
%\usepackage{pdflscape} % Use to turn the whole document or individual pages
\usepackage{fancyhdr}
%\usepackage{xtab}

\usepackage[square, comma, numbers, sort&compress]{natbib} % allows grouping of references [1-4, 8]

\usepackage{ccaption} % Stuff to change the format of a figure caption
\captionnamefont{\bfseries\large}
\captiontitlefont{\bfseries\large}

\setlength{\belowcaptionskip}{10pt} % not part of ccaption

\renewcommand*\familydefault{\sfdefault} % Use if the base font of the document is to be sans serif

%%%%%     End of Configuration Stuff    %%%%%

\title{The \texttt{HiveR} Package (v 0.1-4)}
\author{Bryan A. Hanson\\
\\
DePauw University\\
Department of Chemistry \& Biochemistry\\
Greencastle Indiana USA\\
\\
e-mail: \href{mailto:hanson@depauw.edu}{hanson@depauw.edu}\\
\\
\href{http://github.com/bryanhanson/HiveR}{github.com/bryanhanson/HiveR}\\
\href{http://CRAN.R-project.org/package=HiveR}{CRAN.R-project.org/package=HiveR}\\
}
\date{\today}

%%%%%%%%%
\begin{document}

\maketitle

This document describes some features of the \texttt{HiveR} package including current capabilities and future plans.  The current release contains a core set of functions for creating and drawing hive plots.  Many more features remain to be added; see the sections below.  There are certainly bugs and features that can be improved.  Your comments are always welcome.

As with any \texttt{R} package, details on functions discussed below can be found by typing \texttt{?function\_name} in the \texttt{R} console after installing \texttt{HiveR}.  A complete list of functions available can be had by typing \texttt{?HiveR} and then at the bottom of the page that opens, click on the "index" link.

\section{Background, Inspiration and Motivation} %%%%%

\texttt{HiveR} was inspired by the concept of hive plots as developed by Martin Krzywinski at the Genome Science Center (\href{http://www.hiveplot.com/}{www.hiveplot.com}).  Hive plots are a reaction to "hair ball" style networks in which the layout of the network is arbitrary and hypersensitive to even small changes in the underlying network.  Hive plots are particularly useful for the discovery of emergent properties of networks.

The key innovation in a hive plot, compared to other means of graphically displaying network structure, is in how node information is handled.   Nodes are assigned to axes based upon qualitative or quantitative characteristics of the the node, for instance membership in a certain category, and the position of the node along the axis is based upon some quantitative characteristic of the node.  In a hive plot, edges are handled in a fairly standard way, but may be colored or have a width or weight which encodes an interesting value.  In creating a hive plot, one maps network parameters to the hive plot, and thus the process can be readily tuned to meet one's needs.  The mappable parameters are listed in Table~\ref{Mapping}, and the mapping is limited only by one's creativity and the particular knowledge domain.  Thus ecologists have their own measures of food webs, social network analysts have various measures describing interconnectedness etc.  An essential point is that mapping network parameters in this way results in a reproducible plot which is particularly well-suited for comparing related networks.  Comparison of "hair balls" is notoriously fraught with problems.

Krzywinski has an excellent paper in press detailing the features and virtues of hive plots and is a must-read.  Suderman and Hallett have published a nice review of a wide range of other programs for visualizing biological networks though it is now slightly out of date.\cite{Suderman2007}

\begin{table}
\begin{center}
\label{Mapping}
\begin{tabular}{|l|}
\hline
mappable hive plot parameters\\
\hline
Axis to which a node is assigned\\
Radius of a node\\
Color of a node\\
Size of a node\\
Color of an edge\\
Width or weight of an edge\\
\hline
\end{tabular}
\end{center}
\caption{Hive plot features that can be mapped to network parameters}
\end{table}

Inspired by the examples given by Kryzwinski in his materials on the web, I created the \texttt{R} package  \texttt{FuncMap} in December 2010.  This single function package maps the function calls made by an \texttt{R} package into 3 types: sources, which are functions that make only outgoing calls, sinks, which take only incoming calls, and managers, which do both.  Figure~\ref{FuncMap} shows an example of a plot made by \texttt{FuncMap}; this is a true hive plot.  In this plot, functions in a package are assigned to an axis by their role, and the radius is determined by the number of calls made or received by a function (which is the number of edges or degree of the node).  This is also the basis for the width of the edges.  In this plot, calls (edges) originating on the source axis are shown in green, while those originating on the manager axis are in blue.  By defintion, the sink axis only receives calls.

\texttt{HiveR} takes things a step further.  \texttt{HiveR} is intended as an implementation of hive plots in \texttt{R}, not a port of linnet \emph{per se} (Krzywinski's program that draws hive plots, written in Perl).  As such, it does some things differently, and not all features are implemented (and they may or may not be in the future).  \texttt{HiveR} will draw 2D hive plots with 2-6 axes in a style close to that created by linnet.  However, \texttt{HiveR} adds value by making 3D, interactive plots possible when there are 4-6 axes.  These 3D plots were inspired by the ideas of VSEPR theory in chemistry:  the axes of these 3D plots are  arranged with tetrahedral, trigonal bipyramidal or octahedral geometries for 4-6 axes respectively (see Figure~\ref{VSEPR} and \href{https://secure.wikimedia.org/wikipedia/en/wiki/Vsepr}{wikipedia/VSEPR}).  Other differences are discussed below.

\begin{figure}
\label{VSEPR}
\begin{center}
\includegraphics{VSEPR.pdf}
\end{center}
\caption{Idealized geometries according to VSEPR theory}
\end{figure}



<< SetUp, echo = F, results = hide, eval = TRUE>>=
set.seed(123)
library(lattice) # these are only needed for the automatic vignette build, which occurs 
library(mvbutils) # in a clean environment
library(grid)
library(FuncMap)
library(HiveR)
library(sna)
library(xtable)
if (!file.exists("graphics")) dir.create("graphics")
@

\begin{figure}
\label{FuncMap}
\begin{center}
<< FuncMapExample, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
fw <- foodweb(where = "package:lattice", plotting = FALSE)
ans <- FuncMap(fwb = fw, pkg = "lattice", method = "abs")
@
\end{center}
\caption{FuncMap for package lattice}
\end{figure}

\section{\texttt{HiveR} Features} %%%%%

\subsection{Internal Storage}

\texttt{HiveR} stores the information needed to create a hive plot in a \texttt{HivePlotData} object which is an S3 class.  As an S3 class, this structure can be easily extended by the user to store additional information (though using that information as part of a hive plot would require more work).  Utilities are provided to summarize the contents of these objects and to check their integrity (functions \texttt{sumHPD} and \texttt{chkHPD} respectively).  The structure and content of a \texttt{HivePlotData} object is shown in Table~\ref{Struc}.


\begin{table}
\begin{center}
\label{Struc}
\begin{tabular}{|l|l|l|l|}
\hline
\emph{element} & \emph{(element)} & \emph{type}  & \emph{description}\cr
\hline
\$nodes & & data frame & Data frame of node properties \\
& \$id & int & Node identifier \\
& \$lab & chr & Node label \\
& \$axis & int & Axis to which node is assigned \\
& \$radius & num & Radius (position) of node along the axis \\
& \$size & num & Node size in pixels \\
& \$color & chr & Node color \\
\hline
\$edges & & data frame & Data frame of edge properties \\
& \$id1 & int & Starting node id \\
& \$id2 & int & Ending node id \\
& \$weight & num & Width of edge in pixels \\
& \$color & chr & Edge color \\
\hline
\$type & & chr & Type of hive (2D or 3D) \\
\hline
\$desc & & chr & Description of data \\
\hline
\$axis.cols & & chr & Colors for axes \\
\hline
\$center.hole & & num & Size of center hole \\
\hline
- attr & & chr "HivePlotData" & The S3 class designation\\
\hline
\end{tabular}
\end{center}
\caption{The structure of a HivePlotData object}
\end{table}



\subsection{Generation of Random Network Data Sets}

\texttt{HiveR} has the ability to generate random network data sets with between 2 and 6 axes, using function \texttt{ranHiveData}.  These are useful for testing and demonstration purposes and will be used in the examples below.  A data set has a type, either 2D or 3D.  Type 2D may have 2-6 axes and is plotted in a 2D window using \texttt{grid} graphics which are extremely fast.  Type 3D applies to 4-6 axes only and these hive plots are drawn in 3D using \texttt{rgl} and are interactive.  When using \texttt{ranHiveData} you can specify which type you desire.

\subsection{Built-in Data Sets}

\texttt{HiveR} contains two related 2D type data sets, \texttt{Safari} and \texttt{Arroyo}.  These plant-pollinator data sets give the number of visits for each plant-pollinator pair.  The \emph{E. coli} gene regulatory network is also included as a .dot file.  This data is discussed in Yan \emph{et. al.}\cite{Yan2010} but is based upon data in the RegulonDB.\cite{Gama2010} The version here was extended by Krzywinski and provided in the linnet package.  This .dot file can be processed into either a 2D or 3D type hive plot.  Each of these data sets are used in the examples below.

\subsection{Importing Real Data Sets}

The function \texttt{dot2HPD} will import files in .dot format and convert them to \texttt{HivePlotData} objects (see \href{https://secure.wikimedia.org/wikipedia/en/wiki/DOT\_language}{wikipedia/DOT\_language}) .  This is done with the aid of two external files.  One contains information about how to map node labels to \texttt{HivePlotData} properties.  The other contains information about mapping edge properties.  This approach gives one a lot of flexibility to process the same graph into various hive plots.  This process is demonstrated later for the \emph{E. coli} data set.  Currently, only a very small set of the .dot standard is implemented and one should not expect any particular .dot file to process correctly.

\subsection{Modifying \texttt{HivePlotData} Sets}

Function \texttt{mineHPD} has several options for extracting information within an existing \texttt{HivePlotData} object and converting it to a modifed \texttt{HivePlotData} object.  Currently, there are two options, but more are easily added.  One option assigns the radius of a node based upon the number of edges connected to it (the degree).  The other assigns axes based upon whether a given node is a source node, manager node or sink node.  This latter option is designed to create hive plots similar to those featured by Krzywinski for the \emph{E. coli} data set.

\subsection{Making Hive Plots}

In a hive plot, because the position of the node along an axis (the radius) is quantitative, the nodes can be plotted at their absolute value (native units), or normalized to run between 0\ldots1, or plotted by rank.  Some aspects of the plot that depend upon these options are shown in Table~\ref{Method}.  These different ways of plotting the same data often look dramatically different, and for a particular data set, some methods of plotting nodes may provide more insight.

\begin{table}
\begin{center}
\label{Method}
\begin{tabular}{|l|l|l|l|}
\hline
\emph{method} & \emph{axis length} & \emph{center hole}  & \emph{other} \cr
\hline
native units (abs) & varies ($\propto no.\ nodes$) & asymmetric & nodes may overlap\cr
ranked units (rank) & varies ($\propto rank(no.\ nodes)$) & circular & nodes evenly spaced (1, 2, 3 \dots) and don't overlap  \cr
normed units (norm) & all equal & circular & nodes may overlap\cr
\hline
\end{tabular}
\end{center}
\caption{Comparison of plotting nodes native, rank and norm}
\end{table}

\subsubsection{2D Mode Hive Plots}

Figures~\ref{HP2} shows a 2 axis hive plot using randomly generated data and the function \texttt{plotHive}.  Figure~\ref{HP3a} show a hive plot of a random 3 axis network using absolute scaling; Figure~\ref{HP3r} shows the 3 axis example with the nodes displayed by rank and Figure~\ref{HP3n} the same data normed.  FIgure~\ref{HP5} shows a 5 axis example.  \texttt{plotHive} places axis number 1 at the top (vertical) except in the 2 axis case where it is on the right.  Nodes are drawn in these examples, however, drawing nodes is optional and the more nodes there are, the less likely you will want to draw them.

\begin{figure}
\label{HP2}
\begin{center}
<< HP2, fig = TRUE, echo = FALSE, width = 5, height = 2.5 >>=
hp2 <- ranHiveData(nx = 2)
plotHive(hp2)
@
\end{center}
\caption{A randomly generated hive plot with 2 axes (native units)}
\end{figure}


\begin{figure}
\label{HP3a}
\begin{center}
<< HP3a, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
hp3 <- ranHiveData(nx = 3)
plotHive(hp3)
@
\end{center}
\caption{A randomly generated hive plot with 3 axes (native units)}
\end{figure}


\begin{figure}
\label{HP3r}
\begin{center}
<< HP3r, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
plotHive(hp3, method = "rank")
@
\end{center}
\caption{A randomly generated hive plot with 3 axes (nodes by rank)}
\end{figure}

\begin{figure}
\label{HP3n}
\begin{center}
<< HP3n, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
plotHive(hp3, method = "norm")
@
\end{center}
\caption{A randomly generated hive plot with 3 axes (nodes normed)}
\end{figure}

\begin{figure}
\label{HP5}
\begin{center}
<< HP5, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
hp5 <- ranHiveData(nx = 5)
plotHive(hp5)
@
\end{center}
\caption{A randomly generated hive plot with 5 axes (native units)}
\end{figure}

\subsubsection{3D Mode Hive Plots}

With type 3D and 4 to 6 axes, plots are interactive and cannot be shown here.  See the help page for \texttt{plot3dHive} for an example you can run when have the package installed (\texttt{?plot3dHive}).

\subsection{Some Things to Keep in MInd} %%%%%

\begin{enumerate}
  \item As currently implemented in \texttt{HiveR}, hive plots are agnostic graphs in that they are not necessarily directed or undirected.  However, some of the functions actually do draw edges in a way that could readily be converted into a directed graph in the future.  For example, \texttt{plotHive} draws edges between axes 1 and 2 in a separate step from those starting on 2 and ending on 1.  This is so that the correct curvature of the splines is used, but it could be used to encode directionality.  Further, some options in \texttt{mineHPD} assume that the \texttt{HivePlotData} object represents a directed graph, and while \texttt{dot2HPD} currently doesn't distinguish between directed and non-directed graphs, it could in the future.
  
  \item linnet creates hive plots that are essentially parallel coordinate plots\cite{Wegman1990} that have been wrapped into a radial arrangement.  \texttt{HiveR} plots of type 2D are essentially the same thing.  As with any parallel coordinate plot, the order of the axes affects what you see.  With 2 or 3 axes this isn't a problem.  For 4-6 axes and type 2D, the user has to give some thought as to how to assign the axes.  One should assign the axes in a way that avoids edges jumping over or crossing an axis when using type 2D.  Edges should be arranged 1 $\rightarrow$ 2, 2 $\rightarrow$ 3, \ldots 5 $\rightarrow$ 6 but not 1 $\rightarrow$ 4 for example.  For type 3D, one doesn't have to worry about this, but must guard against edges that start and end on the same axis or start and end on colinear axes.  \texttt{ranHiveData} takes care of these exceptions automatically.  By they way, these conditions don't cause errors, but they overdraw the axes and it doesn't look good.
  
  \item On the other hand, \texttt{HiveR} plots using type 3D are not a parallel coordinate plots.  For 4 axes plotted as a tetrahedron, any pair of axes are intrinsically next to each other and it is not possible for an edge to cross another axis.  For 5 and 6 axes, crossings are a potential problem but generally it is possible to connect axes in more combinations than for type 2D.  For instance, with 5 axes and type 2D, any one axis is between only 2 other axes, and hence can be connected to at most 2 other axes.  But for type 2D and 5 axes, an axis in the apical position can be connected to 3 other axes, and an axis in the equatorial position can be connected to 4 other axes (could use a diagram showing this).
  
  \item Some ideas about network parameters that might be mapped to hive plot parameters (see Table~\ref{Mapping}):
    \begin{enumerate}
      \item Ecology: see various species descriptors computed by function \texttt{specieslevel} in package \texttt{bipartite}.
      \item Social networks: see the section "Node-level indices" in the article describing package \texttt{sna}.  Briefly, degree, betweeness and closeness are the key ideas.\cite{Butts2008}
    \end{enumerate}
\end{enumerate}

\section{A Simple Example Using a Plant-Pollinator Network} %%%%%

\texttt{HiveR} currently contains the built-in data sets, \texttt{Safari} and \texttt{Arroyo} which provide a useful demonstration of \texttt{HiveR}.\footnote{Be warned: I am  not an ecologist and these data sets and plots are merely a demonstration of \texttt{HiveR}.}  These are plant-pollinator data sets which were derived from Vasquez and Simberloff, 2003 \cite{Vazquez2003}.  These describe two-trophic level systems that consist of almost exactly the same suite of plants and pollinators.  \texttt{Safari} is based upon observations of an undisturbed area, while \texttt{Arroyo} is from a nearby location grazed by cattle.  The original data is composed of plant-pollinator pairs and a count of visits for each pair.

Figures~\ref{PPN1} and \ref{PPN4} show two means of plotting \texttt{Safari} using package \texttt{bipartite}.\footnote{Note that we are using the data set \texttt{Safariland} from package \texttt{bipartite}; \texttt{Safari} was derived from \texttt{Safariland}.}  Figure~\ref{PPN1} is a simple table giving plant-pollinator visits as a gray scale heat map.  There are two parameters encoded here: the pairings and the number of visits (arguably, the dimensions of the matrix give the number of species involved as well).  Figure~\ref{PPN4} displays plants across the bottom and pollinators across the top.  The width of the connecting bands in the middle encodes the number of visits for a given plant-pollinator pair.  The width of the top or bottom panel for a species is the total number of visits in which that species participates.  Thus there are three parameters shown in this figure: the pairings, the total visits for a single species, and visits between a given pair.  This second plot makes it pretty clear that four plant-pollinator pairs have by far the most number of visits.

\begin{figure}
\label{PPN1}
\begin{center}
<< PPN1, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
require(bipartite)
data(Safariland)
visweb(Safariland)
@
\end{center}
\caption{Safariland data set using visweb}
\end{figure}


\begin{figure}
\label{PPN4}
\begin{center}
<< PPN4, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
plotweb(Safariland)
@
\end{center}
\caption{Safariland data set using plotweb}
\end{figure}

Another approach to presenting this network graphically would be to use function \texttt{gplot} in the very powerful social network analysis package \texttt{sna}.  \texttt{gplot} is flexible and has many options.  Figure~\ref{PPN5} shows one possible display of \texttt{Safari} (actually, \texttt{Safariland}).  In this plot, plant nodes are colored green and insect nodes red.  The width of the edges is proportional to the number of visits between a pair of species.  Figure~\ref{PPN6} shows the same data using a different layout algorthm, one which shows that there are actually two networks present (and which is not apparent from the hive plots below).  Edge width here is the same as before, but because high traffic pair nodes are close to each other, the connecting, wide edge looks a bit odd (clearly, one could experiment to improve this detail).

\begin{figure}
\label{PPN5}
\begin{center}
<< PPN5, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
gplot(Safariland, gmode = "graph", edge.lwd = 0.05,
	vertex.col = c(rep("green", 9), rep("red", 27)),
	mode = "circle")
@
\end{center}
\caption{Safariland data set using gplot (mode = circle)}
\end{figure}

\begin{figure}
\label{PPN6}
\begin{center}
<< PPN6, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
gplot(Safariland, gmode = "graph", edge.lwd = 0.05,
	vertex.col = c(rep("green", 9), rep("red", 27)))
@
\end{center}
\caption{Safariland data set using gplot (mode = Fruchterman-Reingold)}
\end{figure}

Figures~\ref{PPN2} and \ref{PPN3} show \texttt{Safari} and \texttt{Arroyo} respectively, using \texttt{plotHive} (instrinically type 2D since there are only 2 axes in the data set).  In these plots, plants are on one axis, and pollinators are on the other (plants are on the right).  Each organism was assigned a radius on its axis based by calculating $d'$ using function \texttt{dfun} in package \texttt{bipartite}.  $d$' is an index of specialization; higher values mean the plant or pollinator is more specialized.\footnote{These plots use the absolute value of $d'$ for the node radii.}  Edge weights were assigned proportional to the square root of the normalized number of visits of a pollinator to a plant.  Thus the width of the edge drawn is an indication of the visitation rate.  The transformed number of visits was divided manually into 4 groups and used to assign edge colors ranging from white to red.  The redder colors represent greater numbers of visits, and the color-coding is comparable for each figure.  Thus both the edge color and the edge weight encode the same information.  It would of course be possible to encode an additional variables by changing either edge color or weight, or node size.  These plots show a rich amount of information not available from the more standard plots and show that the networks are fundamentally different:

\begin{itemize}
  \item The degree of specialization with each network is different.  A greater number of visits (wider, redder edges) occur between more specialized species (nodes at larger radii) in \texttt{Safari} than \texttt{Arroyo}.
  \item There are more plant species in \texttt{Arroyo}: the plant (right) axis is longer.
  \item The huge number of visits encoded in red in \texttt{Safari} (the ungrazed site) is missing in \texttt{Arroyo}, which was an interesting aspect of the study.
\end{itemize}

\begin{figure}
\label{PPN2}
\begin{center}
<< PPN2, fig = TRUE, echo = FALSE, width = 5, height = 2.5 >>=
data(Safari)
plotHive(Safari)
@
\end{center}
\caption{Safari data set using plotHive}
\end{figure}

\begin{figure}
\label{PPN3}
\begin{center}
<< PPN3, fig = TRUE, echo = FALSE, width = 5, height = 2.5 >>=
data(Arroyo)
plotHive(Arroyo)
@
\end{center}
\caption{Arroyo data set using plotHive}
\end{figure}

\section{Demonstration of the \emph{E. coli} Gene Regulatory Network}

\texttt{HiveR} includes the \emph{E. coli} gene regulatory network, discussed in Yan \emph{et. al.}\cite{Yan2010} and based upon the RegulonDB\cite{Gama2010} and extended by Krzywinski.  It is contained in a file called \texttt{ecoli.dot} in the \texttt{extdata/E\_coli} directory.  It can be read in with \texttt{dot2HPD} and further processed with \texttt{mineHPD} as shown below.  \texttt{dot2HPD} relies on two external .csv files which tell the function how to map node and edge information in the .dot file to the \texttt{HivePlotData} object.  Tables~\ref{NI} and \ref{EI} show the contents of the files used in this case.  If you choose to draw the nodes, persistent nodes will be red and non-persistent nodes grey.  The type of edge (1\dots4) is also encoded by color. Gene pairs (edges) that are closer physically and genetically are colored yellow $\rightarrow$ orange $\rightarrow$ red with red being the most related pairs.  Gene pairs that are scattered around the physical genome are colored gray.  

<< NI, results = tex, echo = FALSE >>=
tab <- read.csv(file = system.file( "extdata", "E_coli", "NodeInst.csv", package = "HiveR"))
NI <- xtable(tab)
caption(NI) <- "Contents of NodeInst.csv"
label(NI) <- "NI"
print(NI, include.rownames = FALSE)
@

<< EI, results = tex, echo = FALSE >>=
tab <- read.csv(file = system.file( "extdata", "E_coli", "EdgeInst.csv", package = "HiveR"))
EI <- xtable(tab)
caption(EI) <- "Contents of EdgeInst.csv"
label(EI) <- "EI"
print(EI, include.rownames = FALSE)
@

<< E_coli_1, echo = TRUE >>=
# The call below is complicated by the needs of building this vignette
EC1 <- dot2HPD(file = system.file("extdata", "E_coli", "ecoli.dot", package = "HiveR"),
	node.inst = system.file("extdata", "E_coli", "NodeInst.csv", package = "HiveR"),
	edge.inst = system.file( "extdata", "E_coli", "EdgeInst.csv", package = "HiveR"),
	desc = "E coli gene regulatory network (Yan et al PNAS vol 107 pg 9186 (2010)) ",
	axis.cols = rep("grey", 3))
# A more typical version is commented out below.
#EC1 <- dot2HPD(file = "ecoli.dot,
#	node.inst = "NodeInst.csv",
#	edge.inst = "EdgeInst.csv",
#	desc = "E coli gene regulatory network (Yan et al PNAS vol 107 pg 9186 (2010)) ",
#	axis.cols = rep("grey", 3))
sumHPD(EC1)
# assign node radius based upon edge degree:
EC2 <- mineHPD(EC1, option = "rad <- tot.edge.count")
sumHPD(EC2)
# assign node axis based upon role as source, manager or sink:
EC3 <- mineHPD(EC2, option = "axis <- source.man.sink")
sumHPD(EC3)
@


Figures~\ref{E_coli_2}, \ref{E_coli_3}, and \ref{E_coli_4} shows the hive plot of this network using methods \texttt{absolute}, \texttt{rank} and \texttt{norm} respectively.  Each plot takes about 30 seconds to draw.  Source only nodes are at the top, managers at lower left, and sinks at lower right.  One can clearly see based upon the color of the nodes that "related' genes are rare.  Figure~\ref{E_coli_5} shows the same plot but adds the nodes: red nodes are persistant.  This figure is plotted with \texttt{mode = "rank"} so that each gene gets a unique node (the other two modes overlap nodes if more than one is present, and thus the last node plotted determines the color).  With this many nodes, overplotting is a problem.  One solution would be to write an option for \texttt{mineHPD} which makes the persistent (red) nodes plotted last.  Another would be to expand the axis length, but that's probably not realistic: there are 1,274 nodes on this axis.

\begin{figure}
\label{E_coli_2}
\begin{center}
<< E_coli_2, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
EC3a <- EC3
EC3a$center.hole <- 3
plotHive(EC3a, dr.nodes = FALSE)
@
\end{center}
\caption{Hive plot of \emph{E. coli} gene regulatory network (native node units)}
\end{figure}

\begin{figure}
\label{E_coli_3}
\begin{center}
<< E_coli_3, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
EC4 <- EC3
EC4$center.hole <- 1
plotHive(EC4, dr.nodes = FALSE, method = "rank")
@
\end{center}
\caption{Hive plot of \emph{E. coli} gene regulatory network (nodes ranked)}
\end{figure}

\begin{figure}
\label{E_coli_4}
\begin{center}
<< E_coli_4, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
plotHive(EC3, dr.nodes = FALSE, method = "norm")
@
\end{center}
\caption{Hive plot of \emph{E. coli} gene regulatory network (nodes normed)}
\end{figure}

\begin{figure}
\label{E_coli_5}
\begin{center}
<< E_coli_5, fig = TRUE, echo = FALSE, width = 5, height = 5 >>=
plotHive(EC4, dr.nodes = TRUE, method = "rank")
@
\end{center}
\caption{Hive plot of \emph{E. coli} gene regulatory network (nodes ranked \& colored)}
\end{figure}

\section{Comparison to linnet} %%%%%

linnet (for linear networks) is the program written by Krzywinski that draws hive plots.  Here are some notes about how \texttt{HiveR} compares to linnet.

\begin{enumerate}
  \item To show more information, in linnet one can clone an axis to specifically show connections that would start and end on the same axis (if it isn't cloned).  In \texttt{HiveR}, the same notion exists but rather than clone an existing axis, one can simply add a new axis based upon some property of the system.  Or, for 2D hive plots, \texttt{HiveR} is able to show edges that start and end on the same axis.
  \item No segmentation of an axis is currently possible with \texttt{HiveR}.
  \item As mentioned above, for 2D hive plots \texttt{HiveR} is capable of drawing edges that start and end on the same axis. linnet does not do this.
\end{enumerate}

\section{Things to Do} %%%%%

\begin{enumerate}
  \item Add magnification of an axis.  Implement in manipAxis.
  \item Add inversion of an axis. Implement in manipAxis.
  \item Tasks related to importing real data
	\begin{enumerate}
		\item Find a medium sized real data set.
		\item Experiment with mapping more complex networks such as food webs.
	\end{enumerate}
  \item Work on speed: for 3D mode hive plots, drawing even a modest number of edges can be prohibitively slow.  Testing has shown that the problem is not \texttt{rcsr}, so need to look other places when profiling the code.
\end{enumerate}

\section{Features to Add Long Term} %%%%%

\begin{enumerate}
  \item Hive Panels: set up a GUI or other display mechanism which can display multiple views of the same hive from different perspectives, or different hives from the same perspective.  If making 2D hive plots, this should be pretty trivial using \texttt{grid} graphics.  Krzywinski calls these \emph{hive panels}.
  \item The current 3D spline calculation produces an asymmetric spline.  It could be made symmetric.
  \item  Could add line type as an edge parameter.  This might be simple, or not.
  \item Some means of optionally labeling axes might be useful.
  \item Could add log as a means of scaling values along an axis, though users could readily do this on the fly.
  \item Add the ability to subtract 2 hive plots and display the result.
  \item Set up animations for the 3D mode.  Perhaps include the possibility of running two animations of related hives side by side.
  \item Set up a mechanism to automatically permute the axes in 3D mode when nx = 5 or 6 so that the best option can be selected.  Might also be worth doing in 2D mode for 4-6 axes, except in this case it's not a question of how you display but how you import the data. Wegman\cite{Wegman1990} has a formula describing all possible combinations that would be needed.
  \item Set up mouse controls in 3D mode.
\end{enumerate}


\begin{flushleft}
\bibliographystyle{ieeetr} % Cause refs to be numbered and collected in order used
\addcontentsline{toc}{section}{References}
\bibliography{HiveR}
\end{flushleft}

\end{document}
